
1

Како успешен студент на ФИНКИ вие сте повикани да работите на подобрување на IKnow системот. Како дел од системот треба да се додаде нов дел кој ќе биде одговорен за обработување на дисциплински мерки, па како дел од тимот за развивање на софтверот ќе треба да ја имплементирате класата DisciplinaryAction која ќе ги чува следните информации:

Името на студентот (динамички алоцирана низа од карактери)
Индексот на студентот (int)
Причината за дисциплинската мерка (динамички алоцирана низа од карактери)

Класата треба да ги има следните методи и конструктори:

Default конструктор
Copy конструктор
Конструктор со аргументи
Деструктор
Set и Get методи за индексот
void print() метод
Оператор =

Print() методот треба да печати според следниот формат:
Student: [Name]
Student's index: [Index]
Reason: [Reason]

При што вредностите во [] треба да се заменат со вредностите во класата!

!!! ДА НЕ СЕ ПРАВАТ ПРОМЕНИ ВО MAIN() ФУНКЦИЈАТА !!!


#include <iostream>
#include <cstring>

using namespace std;

class DisciplinaryAction {
private:
    char* name;
    int index;
    char* reason;

public:
    DisciplinaryAction() : name(nullptr), index(0), reason(nullptr) {}

    DisciplinaryAction(const char* name, int index, const char* reason) {
        this->name = new char[strlen(name) + 1];
        strcpy(this->name, name);
        this->index = index;
        this->reason = new char[strlen(reason) + 1];
        strcpy(this->reason, reason);
    }

    // Copy constructor
    DisciplinaryAction(const DisciplinaryAction& other) {
        name = new char[strlen(other.name) + 1];
        strcpy(name, other.name);
        index = other.index;
        reason = new char[strlen(other.reason) + 1];
        strcpy(reason, other.reason);
    }

    // Assignment operator
    DisciplinaryAction& operator=(const DisciplinaryAction& other) {
        if (this != &other) {
            // Delete existing resources
            delete[] name;
            delete[] reason;

            // Allocate new memory and copy
            name = new char[strlen(other.name) + 1];
            strcpy(name, other.name);
            index = other.index;
            reason = new char[strlen(other.reason) + 1];
            strcpy(reason, other.reason);
        }
        return *this;
    }

    ~DisciplinaryAction() {
        delete[] name;
        delete[] reason;
    }

    int getIndex() const {
        return index;
    }

    void setIndex(int index) {
        this->index = index;
    }

    void print() const {
        cout << "Student: " << name << endl;
        cout << "Student's index: " << index << endl;
        cout << "Reason: " << reason << endl;
    }
};

int main() {
    int n;
    cin >> n;

    DisciplinaryAction arr[n];

    for (int i = 0; i < n; i++) {
        char name[100];
        char reason[100];
        int index;

        cin >> name >> index >> reason;

        arr[i] = DisciplinaryAction(name, index, reason);
    }

    cout << "-- Testing operator = & print() --\n";
    arr[0].print();

    DisciplinaryAction merka(arr[0]);
    merka.setIndex(112233);

    cout << "\n-- Testing copy constructor & set index --\n";
    cout << "-------------\n";
    cout << "Source:\n";
    cout << "-------------\n";
    arr[0].print();

    cout << "\n-------------\n";
    cout << "Copied and edited:\n";
    cout << "-------------\n";
    merka.print();

    cout << "\n-- Testing if array was inputted correctly --\n";

    for (int i = 0; i < n; i++)
        arr[i].print();

    return 0;
}





2

Да се дефинира класа Student за која се чува:
name(низа од карактери, динамички алоцирана) - неговото име
age (цел број) - колку години има
major (низа од карактери, динамички алоцирана) - што студира
За класата да се дефинира default конструктор, конструктор со аргументи и copy конструктор.

Потоа да се дефинира класа Classroom за која се чува:
students (динамички алоцирана низа од Студенти)
numStudents(int)
capacity(int)
За класата да се дефинира  default конструктор и конструктор со аргументи. 

Треба за класата Classroom да се дефинираат следните методи:
add - да се додаде нов студент
remove - да се отстрани некој студент со дадено име name
findMedianAge - наоѓа која е медијаната за години на стидентите во дадениот Classroom. 
Пример: 2 4 5 6 7 8 10
Медијана: 6

Пример: 2 4 5 7 8 10 12 20
Медијана: (7 + 8)/2

Мора да е растечки редослед!

По потреба може да се креираат get и set методи.

Сите студенти имаат уникатно име.
Да не се менува main функцијата.



#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;

class Student {
    char name[100];
    int age;
    char major[100];
public:
    Student() {}
    Student(const char* n, int a, const char* m) {
        strcpy(name, n);
        age = a;
        strcpy(major, m);
    }
    void print() const {
        cout << name << " (" << age << ", " << major << ")" << endl;
    }
    int getAge() const {
        return age;
    }
    const char* getName() const {
        return name;
    }
};

class Classroom {
    Student students[100];
    int numStudents;
public:
    Classroom() {
        numStudents = 0;
    }
    void add(const Student& s) {
        if (numStudents < 100) {
            students[numStudents++] = s;
        }
    }
    void remove(const char* name) {
        for (int i = 0; i < numStudents; i++) {
            if (strcmp(students[i].getName(), name) == 0) {
                for (int j = i; j < numStudents - 1; j++) {
                    students[j] = students[j + 1];
                }
                numStudents--;
                break;
            }
        }
    }
    void printStudents() const {
        for (int i = 0; i < numStudents; i++) {
            students[i].print();
        }
    }
    int getNumStudents() const {
        return numStudents;
    }
    const Student& getStudent(int i) const {
        return students[i];
    }
};

double findMedianAge(const Classroom& c) {
    int numStudents = c.getNumStudents();
    int ages[numStudents];
    for (int i = 0; i < numStudents; i++) {
        ages[i] = c.getStudent(i).getAge();
    }
    sort(ages, ages + numStudents);
    if (numStudents % 2 == 0) {
        return (ages[numStudents/2] + ages[numStudents/2 - 1]) / 2.0;
    } else {
        return ages[numStudents/2];
    }
}

//DO NOT CHANGE
int main() {
    int numClassrooms, numStudents;
    cin >> numClassrooms;
    Classroom classrooms[100];
    Student students[100];

    // Testing add method
    for (int i = 0; i < numClassrooms; i++) {
        cin >> numStudents;
        for (int j = 0; j < numStudents; j++) {
            char name[100], major[100];
            int age;
            cin >> name >> age >> major;
            Student student(name, age, major);
            classrooms[i].add(student);
            students[i*numStudents + j] = student;
        }
        cout<<"Classroom "<<i<<endl;
        classrooms[i].printStudents();
    }


    // Testing findMedianAge method
    int targetClassroom;
    cin >> targetClassroom;
    double medianAge = findMedianAge(classrooms[targetClassroom]);
    cout << "The median age in classroom " << targetClassroom << " is: " << medianAge << endl;

    // Testing remove method
    cin >> numStudents;
    for (int j = 0; j < numStudents; j++) {
        char name[100];
        cin >> name;
        for (int i = 0; i < numClassrooms; i++) {
            classrooms[i].remove(name);
        }
    }
    for (int i = 0; i < numClassrooms; i++) {
        cout<<"Classroom "<<i<<endl;
        classrooms[i].printStudents();
    }

    return 0;
}







