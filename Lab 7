1.
Task Description: String Instruments
You are tasked with implementing a program that models and manipulates string instruments. The system consists of an abstract base class ZicanInstrument (String Instrument) and two derived classes, Mandolina (Mandolin) and Violina (Violin). Your implementation must allow for comparison, price calculation, and output formatting of these instruments.

Base Class: ZicanInstrument
The ZicanInstrument class represents a generic string instrument.

Attributes:
ime (string): Name of the instrument.
brojZici (int): Number of strings.
osnovna_cena (float): Base price of the instrument.
Methods:
Constructor:
Initializes the attributes ime, brojZici, and osnovna_cena.
Pure Virtual Method: double cena()
Abstract method to calculate the price of the instrument. This method must be implemented in the derived classes.
Getter: int getBrojZici()
Returns the number of strings.
Overloaded operator<<:
Outputs the name, number of strings, and calculated price of the instrument.
Overloaded operator==:
Compares two instruments by the number of strings.
Derived Class: Mandolina
The Mandolina class inherits from ZicanInstrument.

Additional Attribute:
forma (string): The shape of the mandolin.
Methods:
Constructor:
Initializes ime, brojZici, osnovna_cena, and forma.
double cena():
Calculates the price of the mandolin. If the shape (forma) is "Neapolitan", the price is increased by 15%.
Overloaded operator==:
Compares two Mandolina objects. If the number of strings and the shape are the same, the instruments are considered equal.
Derived Class: Violina
The Violina class inherits from ZicanInstrument.

Additional Attribute:
golemina (float): The size of the violin.
Methods:
Constructor:
Initializes ime, brojZici, osnovna_cena, and golemina.
double cena():
Calculates the price of the violin. If the size (golemina) is 0.25, the price is increased by 10%. If the size is 1.00, the price is increased by 20%.
Overloaded operator==:
Compares two Violina objects. If the number of strings and the size are the same, the instruments are considered equal.
Global Function: pecatiInstrumenti
Purpose:
Prints the prices of all instruments that are equal to a given instrument.

Parameters:
ZicanInstrument &zi: A reference to the instrument to compare against.
ZicanInstrument **instrumenti: An array of pointers to ZicanInstrument objects.
int n: The number of instruments in the array.
Implementation:
For each instrument in the array, if it is equal to the given instrument (zi), print its price.

Input Format
The first line contains:
ime (name of the mandolin)
brojZici (number of strings)
cena (base price)
forma (shape of the mandolin)
The second line contains:
n (number of instruments of each type).
The next n lines contain:
Details of n mandolins (ime, brojZici, cena, forma).
The next n lines contain:
Details of n violins (ime, brojZici, cena, golemina).
Output Format
The prices of all instruments equal to the first input instrument (Mandolina) based on the comparison logic.
Constraints
Use dynamic memory allocation for arrays of instruments.
Implement proper cleanup of dynamically allocated memory to avoid memory leaks.
Ensure the correct use of virtual methods and polymorphism.



THE CODE:

#include<iostream>
#include<string>
using namespace std;

class ZicanInstrument{
protected:
    string ime;
    int brojZici;
    float osnovna_cena;
public:
    ZicanInstrument(string ime="", int brojZici=0, float osnovna_cena=0){
        this->ime=ime;
        this->brojZici=brojZici;
        this->osnovna_cena=osnovna_cena;
    }
    virtual double cena()=0;
    int getBrojZici(){
        return brojZici;
    }
    friend ostream &operator<<(ostream &o, ZicanInstrument &z){
        return o<<z.ime<<" "<<z.brojZici<<" "<<z.cena()<<endl;
    }
    virtual bool operator==(const ZicanInstrument &z)const {
        return brojZici==z.brojZici;
    }
};

class Mandolina:public ZicanInstrument{
private:
    string forma;
public:
    Mandolina(string ime="", int brojZici=0, float osnovna_cena=0, string forma="")
            : ZicanInstrument(ime, brojZici, osnovna_cena){
        this->forma=forma;
    }
    double cena(){
        double cena=osnovna_cena;
        if(forma=="Neapolitan"){
            cena*=1.15;
        }
        return cena;
    }
    const bool &operator==(const ZicanInstrument &z) {
        if(const Mandolina *m=dynamic_cast<const Mandolina*>(&z)){
            return forma==m->forma;
        }
        return ZicanInstrument::operator==(z);
    }
};

class Violina:public ZicanInstrument{
private:
    float golemina;
public:
    Violina(string ime="", int brojZici=0, float osnovna_cena=0, float golemina=0)
            : ZicanInstrument(ime, brojZici, osnovna_cena){
        this->golemina=golemina;
    }
    double cena(){
        double cena=osnovna_cena;
        if(golemina==0.25){
            cena*=1.10;
        }else if(golemina==1.00){
            cena*=1.20;
        }
        return cena;
    }
    const bool &operator==(const ZicanInstrument &z){
        if(const Violina *v=dynamic_cast<const Violina*>(&z)){
            return golemina==v->golemina;
        }
        return ZicanInstrument::operator==(z);
    }
};

void pecatiInstrumenti(ZicanInstrument &zi, ZicanInstrument **instrumenti, int n){
    for(int i=0;i<n;i++){
        if(*instrumenti[i]==zi){
            cout<<instrumenti[i]->cena()<<endl;
        }
    }
}

int main() {
    char ime[20];
    int brojZici;
    float cena;
    char forma[20];
    cin >> ime >> brojZici >> cena >> forma;
    Mandolina m(ime, brojZici, cena, forma);
    int n;
    cin >> n;
    ZicanInstrument **zi = new ZicanInstrument*[2 * n];
    for(int i = 0; i < n; ++i) {
        cin >> ime >> brojZici >> cena >> forma;
        zi[i] = new Mandolina(ime, brojZici, cena, forma);
    }
    for(int i = 0; i < n; ++i) {
        float golemina;
        cin >> ime >> brojZici >> cena >> golemina;
        zi[n + i] = new Violina(ime, brojZici, cena, golemina);
    }
    pecatiInstrumenti(m, zi, 2 * n);
    for(int i = 0; i < 2 * n; ++i) {
        delete zi[i];
    }
    delete [] zi;
    return 0;
}



2.
Task: Shapes with Polymorphism
In this task, you will implement a program that models different shapes (Square, Circle, Triangle) using inheritance and polymorphism. The program should calculate the area of each shape, print the results, and count the occurrences of each shape type in a collection.

Steps to Solve the Task
1. Define the Abstract Base Class (Shape)
Create a class Shape with a protected member side to represent the size of the shape.
Define the following pure virtual functions in Shape:
double plostina() - calculates the area of the shape.
void pecati() - prints the shape's details and area.
int getType() - returns an integer representing the shape type (1 for Square, 2 for Circle, 3 for Triangle).
2. Implement Derived Classes
Square Class:
Inherit from Shape.
Implement plostina() to return 
side
2
side 
2
 .
Implement pecati() to print the shape's name and area.
Implement getType() to return 1.
Circle Class:
Inherit from Shape.
Implement plostina() to return 
𝜋
×
side
2
π×side 
2
  (use 
𝜋
=
3.14
π=3.14).
Implement pecati() to print the shape's name and area.
Implement getType() to return 2.
Triangle Class:
Inherit from Shape.
Implement plostina() to return 
3
4
×
side
2
4
3
​
 
​
 ×side 
2
 .
Implement pecati() to print the shape's name and area.
Implement getType() to return 3.
3. Create a Function to Count Shape Types
Implement the checkNumTypes(Shape** niza, int n) function.
This function should iterate over an array of Shape pointers and use getType() to count and print the number of each shape type.
4. Main Function
Read an integer n representing the number of shapes.
Create a dynamic array of Shape* with size n.
For each shape:
Read an integer classType (1 for Square, 2 for Circle, 3 for Triangle).
Read an integer side.
Based on classType, dynamically allocate the appropriate shape object and store it in the array.
Iterate through the array and call pecati() for each shape.
Call checkNumTypes() to count and print the occurrences of each shape type.

#include<iostream>
#include<string>
#include <cmath>
#include <iomanip>  // For formatting output

using namespace std;

class Shape {
protected:
    int side;
public:
    Shape(int side=0) {
        this->side = side;
    }

    virtual double plostina() = 0;
    virtual void pecati() = 0;
    virtual int getType() = 0;

    ~Shape() {}

    int getSide() const {
        return side;
    }
};

class Square : public Shape {
public:
    Square(int side=0) : Shape(side) {}

    double plostina() override {
        return side * side;
    }

    void pecati() override {
        cout << "Kvadrat so plostina = " << fixed << setprecision(2) << plostina() << endl;
    }

    int getType() override {
        return 1;
    }
};

class Circle : public Shape {
public:
    Circle(int side=0) : Shape(side) {}

    double plostina() override {
        return 3.14 * (side * side);
    }

    void pecati() override {
        cout << "Krug so plostina = " << fixed << setprecision(2) << plostina() << endl;
    }

    int getType() override {
        return 2;
    }
};

class Triangle : public Shape {
public:
    Triangle(int side=0) : Shape(side) {}

    double plostina() override {
        return (sqrt(3) / 4.0) * (side * side);
    }

    void pecati() override {
        cout << "Triagolnik plostina e = " << fixed << setprecision(2) << plostina() << endl;
    }

    int getType() override {
        return 3;
    }
};

void checkNumTypes(Shape** niza, int n) {
    int squareCount = 0, circleCount = 0, triangleCount = 0;

    for (int i = 0; i < n; i++) {
        switch (niza[i]->getType()) {
            case 1:
                squareCount++;
                break;
            case 2:
                circleCount++;
                break;
            case 3:
                triangleCount++;
                break;
        }
    }

    cout << "Broj na kvadrati vo nizata = " << squareCount << endl;
    cout << "Broj na krugovi vo nizata = " << circleCount << endl;
    cout << "Broj na triagolnici vo nizata = " << triangleCount << endl;
}

int main() {
    int n;
    cin >> n;

    Shape** niza = new Shape*[n];
    int classType;
    int side;

    for (int i = 0; i < n; ++i) {
        cin >> classType;
        cin >> side;
        switch (classType) {
            case 1:
                niza[i] = new Square(side);
                break;
            case 2:
                niza[i] = new Circle(side);
                break;
            case 3:
                niza[i] = new Triangle(side);
                break;
        }
    }

    for (int i = 0; i < n; ++i) {
        niza[i]->pecati();
    }

    checkNumTypes(niza, n);

    // Clean up dynamically allocated memory
    for (int i = 0; i < n; ++i) {
        delete niza[i];
    }
    delete[] niza;

    return 0;
}
