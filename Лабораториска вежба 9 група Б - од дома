1.

Дадени ви се класите User и SocialNetwork. 

Во класата User се чуваат информации за корисничко име, возраст и број на пријатели во рамки на некоја социјална мрежа.

Во класата SocialNetwork се чува листа на членови (објекти од класата User) и големина на листата.

Да се дополни почетниот код со следните работи:

Да се спречи додавање на корисник со веќепостоечко корисничко име преку фрлање исклучок од тип UserAlreadyExistsException. Справете се со исклучокот на потребното место. 
Да се додаде променлива за лимитот на дозволени пријатели на еден корисник (цел број). Променливата да важи за сите корисници (објекти од класа User) и истата да може да се менува преку методот setLimit. Иницијално променливата да има вредност 3.
Да се фрли исклучок од тип UserNotFoundException во методот friendRequest доколку firstUsername или secondUsername не се кориснички имиња на корисници во социјалната мрежа. Справете се со исклучокот на потребното место. 
Да се спречи зголемување на бројот на пријатели на некој корисник (над дозволениот лимит) со исклучок од тип FriendsLimitExceededException. Справете се со исклучокот на потребното место.
----------------------------------------------------------

You are given the User and SocialNetwork classes.

The User class stores information about username, age and number of friends within a social network.

The SocialNetwork class stores a list of members (objects of the User class) and the size of the list.

Add in the initial code the following things:

1. Prevent adding a user with an already existing username by throwing an exception of type UserAlreadyExistsException. Handle the exception where necessary.

2. Add a variable for the limit of friends allowed per user (integer). The variable should be valid for all users (objects of the User class) and it can be changed through the setLimit method. Initially, the variable should have a value of 3.

3. Throw an exception of type UserNotFoundException in the friendRequest method if friendRequest or secondUsername are not usernames of users in the social network. Handle the exception where necessary.

4. To prevent an increase in the number of friends of a user (beyond the allowed limit) with an exception of type FriendsLimitExceededException. Handle the exception where necessary.


For example:

Input	
5
stefan.andonov 19
vlatko.spasev 20
marko.petrov 21
dimitar.kitanovski 22
ema.pandilova 18
0
0
0

Result
Registration of users
Users:
Username: stefan.andonov Age: 19 # of friends: 0
Username: vlatko.spasev Age: 20 # of friends: 0
Username: marko.petrov Age: 21 # of friends: 0
Username: dimitar.kitanovski Age: 22 # of friends: 0
Username: ema.pandilova Age: 18 # of friends: 0

Friend requests
Users:
Username: stefan.andonov Age: 19 # of friends: 0
Username: vlatko.spasev Age: 20 # of friends: 0
Username: marko.petrov Age: 21 # of friends: 0
Username: dimitar.kitanovski Age: 22 # of friends: 0
Username: ema.pandilova Age: 18 # of friends: 0

CHANGE STATIC VALUE
Users:
Username: stefan.andonov Age: 19 # of friends: 0
Username: vlatko.spasev Age: 20 # of friends: 0
Username: marko.petrov Age: 21 # of friends: 0
Username: dimitar.kitanovski Age: 22 # of friends: 0
Username: ema.pandilova Age: 18 # of friends: 0




#include<iostream>
#include<cstring>
using namespace std;

class UserAlreadyExistsException {
//TODO
};

class UserNotFoundException {
//TODO
};

class FriendsLimitExceededException {
//TODO
};

class User {
private:
    char username[50];
    int age;
    int friends;

public:
    User(char *username = "", int age = 18) : age(age) {
        strcpy(this->username, username);
        friends = 0;
    }

    friend ostream &operator<<(ostream &os, const User &user) {
        os << "Username: " << user.username << " Age: " << user.age << " # of friends: " << user.friends;
        return os;
    }

    User &operator++() {
        ++friends;
        return *this;
    }

    friend class SocialNetwork;


};

class SocialNetwork {
private:
    User *users;
    int n;
public:
    SocialNetwork() {
        n = 0;
        users = new User[n];
    }

    SocialNetwork &operator+=(User &u) {

        User *tmp = new User[n + 1];
        for (int i = 0; i < n; i++) {
            tmp[i] = users[i];
        }
        tmp[n++] = u;
        delete[] users;
        users = tmp;
        return *this;
    }

    void friendRequest(char *firstUsername, char *secondUsername) {
        for (int i = 0; i < n; i++) {
            if (strcmp(users[i].username, firstUsername) == 0) {
                for (int j = 0; j < n; j++) {
                    if (strcmp(users[j].username, secondUsername) == 0) {
                        ++users[i];
                        ++users[j];
                        return;
                    }
                }
            }
        }
    }

    friend ostream &operator<<(ostream &os, const SocialNetwork &network) {
        os << "Users: " << endl;
        for (int i=0;i<network.n;i++) {
            os << network. users[i] << endl;
        }
        return os;
    }
};


int main() {
    SocialNetwork sn;
    int n;
    cin >> n;
    for (int i=0;i<n;i++){
        char username[50]; int age;
        cin >> username >> age;
        User u(username, age);
        sn += u;
        
    }

    cout << "Registration of users " << endl;
    cout << sn << endl;
    cout << "Friend requests " << endl;

    int friendships;
    cin >> friendships;
    for (int i=0;i<friendships;i++){
        char username1[50], username2[50];
        cin >> username1 >> username2;
        sn.friendRequest(username1, username2);
        
    }

    cout << sn << endl;

    cout << "CHANGE STATIC VALUE" << endl;

    int maxFriends;
    cin >> maxFriends;
    cin >> friendships;
    User::setLimit(maxFriends);
    for (int i=0;i<friendships;i++){
        char username1[50], username2[50];
        cin >> username1 >> username2;
        sn.friendRequest(username1, username2);
        
    }
    cout << sn;
    return 0;
}











2.

Да се имплементира класа Flight во која се чува:

кодот на летот(низа од најмногу 40 знаци)
градот на заминување(низа од најмногу 100 знаци)
градот на пристигнување(низа од најмногу 100 знаци)
цена на лет(децимален број)
цена на багаж(децимален број)
За оваа класа да се имплементираат следните методи:

функција calculateTotalPrice() што ја враќа збир од цената на летот и цената на багажот
функција displayInfo() за печатење на летот во формат:
[ Код Од До Цена]

Да се имплементира класа EconomyFlight во која покрај основните информации за летот дополнително се чува:

број на седиште(низа од најмногу 4 карактери)
Во оваа класа да се препокрие соодветно функцијата calculateTotalPrice() така што на основната цена на летот ќе се пресмета LOYALTY_DISCOUNT што е статичка променлива во класата која изнесува 20% попуст. Дополнително доколку првата буква од кодот на седиштето е C или F цената на летот се зголемува 30% затоа што седиштето е до прозорецот. Доколку при пресметувањето на цената првата буква од кодот на седиштето не е A, B, C, D, E, F да се фрли исклучок InvalidSeatNumberException кој ќе ја печати пораката "Invalid Seat Number Exception". LOYALTY_DISCOUNT е статичка променлива и може да ја промени само авио компанијата. 

Соодветно во класата исто така да се препокрие функцијата displayInfo која ќе печати во формат:

[ Код Од До Седиште

Total price: Вкупната Цена ]

Дополнително во класите да се имплементираат соодветно сите потребни работи.

---------------------------------------

Implement a Flight class that stores:

the flight code (a string of up to 40 characters)
the departure city (a string of up to 100 characters)
the arrival city (a string of up to 100 characters)
the flight price (a decimal number)
the baggage price (a decimal number)
For this class, implement the following methods:

a function calculateTotalPrice() that returns the sum of the flight price and the baggage price
a function displayInfo() for printing the flight in the format:
[ Code From To Price]
Implement an EconomyFlight class that, in addition to the basic flight information, also stores:

the seat number (a string of up to 4 characters)
In this class, appropriately override the calculateTotalPrice() function so that the base flight price is calculated with a LOYALTY_DISCOUNT, which is a static variable in the class amounting to a 20% discount. Additionally, if the first letter of the seat code is 'C' or 'F', the flight price increases by 30% because the seat is by the window. If the first letter of the seat code is not A, B, C, D, E, or F when calculating the price, throw an InvalidSeatNumberException that prints the message "Invalid Seat Number Exception". LOYALTY_DISCOUNT is a static variable and can only be changed by the airline company.

Appropriately override the displayInfo function in the class to print in the format:

[ Code From To Seat

Total price: Total Price ]
Additionally, implement all necessary features in the classes.


For example:

Input	
1
5
W775 Skopje Vienna 120 50 C25
G667 Rome Paris 100 25 A18
A556 Istanbul Amsterdam 200 0 B05
S449 Skopje Berlin 80 45 E14
K119 Porto Madrid 95 30 F18

Result
===== Testiranje na klasite ======
W775 Skopje-Vienna C25
Total Price: $176.8
G667 Rome-Paris A18
Total Price: $100
A556 Istanbul-Amsterdam B05
Total Price: $160
S449 Skopje-Berlin E14
Total Price: $100
K119 Porto-Madrid F18
Total Price: $130

int main() {
    int testCase;
    cin>>testCase;
    char code[100];
    char from[100];
    char to[100];
    double price;
    double baggagePrice;
    char seatNumber[4];

    if(testCase == 1){
        cout << "===== Testiranje na klasite ======" << endl;
        int n;
        cin>>n;
        for(int i=0; i<n;i++){
            cin>>code>>from>>to>>price>>baggagePrice>>seatNumber;
            Flight f = Flight(code, from, to, price, baggagePrice);
            EconomyFlight ec = EconomyFlight(f, seatNumber);
            ec.displayInfo();
        }
    }
    if(testCase == 2){
        cout << "===== Testiranje na isklucoci ======" << endl;
        int n;
        cin>>n;
        for(int i=0; i<n;i++){
            cin>>code>>from>>to>>price>>baggagePrice>>seatNumber;
            Flight f = Flight(code, from, to, price, baggagePrice);
            EconomyFlight ec = EconomyFlight(f, seatNumber);
            ec.displayInfo();
        }
    }
    if(testCase == 3){
        cout << "===== Testiranje na static clenovi ======" << endl;
        cin>>code>>from>>to>>price>>baggagePrice>>seatNumber;
        Flight f = Flight(code, from, to, price, baggagePrice);
        EconomyFlight ec = EconomyFlight(f, seatNumber);
        ec.displayInfo();
        EconomyFlight::setLoyaltyDiscount(50);
        ec.displayInfo();
    }

    return 0;
}






3.
Да се напише програма која што од датотека со име "text.txt" ќе ги одреди и ќе ги испечати на стандарден излез:

релативната фреквенција на сите мали букви
релативната фреквенција на сите големи букви
Релативната фреквенција на даден(и) карактер(и) се пресметува како количник на вкупното појавување на тој/тие карактер/и со вкупниот број на карактери во текстот (да се игнорираат празните места и специјалните знаци).

Да не се менува функцијата writeToFile().

----------------------------------------------------


Write a program that reads from a file named "text.txt" and prints to the standard output:

the relative frequency of all lowercase letters
the relative frequency of all uppercase letters
The relative frequency of a given character(s) is calculated as the ratio of the total occurrences of that/those character(s) to the total number of characters in the text (ignoring spaces and special characters).

Do not modify the function writeToFile().


For example:

Input	
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse efficitur tempus enim, id imperdiet nisl rhoncus et. Nunc aliquam suscipit ex eget tincidunt. Nullam finibus ipsum congue, tempus quam et, condimentum diam. MAECENAS COMMODO est NIBH, ac condimentum neque ultrices in. Donec varius lectus nibh. Praesent quis turpis quis purus venenatis condimentum id molestie erat. In viverra dignissim congue. Sed sit amet malesuada metus, ut egestas massa. Vivamus pretium, dui at hendrerit pharetra, nunc augue dignissim lorem, in suscipit tortor ligula quis tellus. Sed porttitor enim non faucibus facilisis. Phasellus accumsan tincidunt est, quis imperdiet mauris commodo vel. Aliquam erat volutpat. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Vestibulum vestibulum massa suscipit quam mollis, quis hendrerit quam tempor. In feugiat viverra condimentum. Donec volutpat est enim, ut malesuada libero pulvinar vel. In hac habitasse.#

Result
0.0455
0.9545



#include <iostream>
#include <fstream>
#include <cctype>

void writeToFile() {
    std::ofstream outFile("text.txt");
    char c;
    while((c = std::cin.get()) != '#') {
        outFile.put(c);
    }
    outFile.close();
}

int main() {
    writeToFile();
    
    //Your code

    return 0;
}


FULL CODE:

#include <iostream>
#include <fstream>
#include <cctype>
#include <iomanip>  // For controlling precision

void writeToFile() {
    std::ofstream outFile("text.txt");
    char c;
    while((c = std::cin.get()) != '#') {
        outFile.put(c);
    }
    outFile.close();
}

int main() {
    writeToFile();

    // Open the file for reading
    std::ifstream inFile("text.txt");

    // Variables to store the counts of lowercase and uppercase letters
    int lowerCount = 0, upperCount = 0, totalCount = 0;
    char c;

    // Read through the file
    while (inFile.get(c)) {
        if (std::isalpha(c)) {  // Ignore non-alphabet characters
            totalCount++;
            if (std::islower(c)) {
                lowerCount++;
            } else if (std::isupper(c)) {
                upperCount++;
            }
        }
    }

    // Calculate the relative frequencies
    double lowerFreq = static_cast<double>(lowerCount) / totalCount;
    double upperFreq = static_cast<double>(upperCount) / totalCount;

    // Output the relative frequencies with 4 decimal places
    std::cout << std::fixed << std::setprecision(4) << upperFreq << std::endl;
    std::cout << std::fixed << std::setprecision(4) << lowerFreq << std::endl;
    

    inFile.close();
    return 0;
}



