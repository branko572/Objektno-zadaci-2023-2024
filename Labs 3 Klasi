1.
Да се дефинира класа MobilePhone во која ќе се чуваат податоци за еден мобилен телефон:

модел (низа од карактери не подолга од 20 карактери)
број на модел (цел број)
година на издавање (цел број)
За класата да се дефинира default конструктор, конструктор со аргументи, copy конструктор, деструктор и доколку има потреба get методи. Исто така да се дефинира и фунцкија за печатење на информации за класата која ќе печати во следниот формат „(модел) (број на модел) release year: (година на издавање)“.

Потоа да се дефинира класа Owner во која се чуваат следните информации:

име (низа од карактери не подолга од 20 карактери)
презиме (низа од карактери не подолга од 20 карактери)
мобилен телефон (објект од класа MobilePhone)
Да се креира default конструктор, конструктор со аргументи, деструктор и доколку има потреба get методи. Исто така да се дефинира и функција за печатење на информации за класата која ќе печати во следниот формат: 

„(име) (презиме) has a mobile phone:

(информации за мобилен телефон)“

ДА НЕ СЕ МЕНУВА MAIN ФУНКЦИЈАТА!!!



#include <iostream>
#include <cstring>

using namespace std;

class MobilePhone {
private:
    char model[20];
    int broj;
    int godina;

public:
    MobilePhone(char *model="", int broj=0, int godina=0) {
        ::strcpy(this->model, model);
        this->broj = broj;
        this->godina = godina;
    }

    MobilePhone(const MobilePhone &other) {
        ::strcpy(this->model, other.model);
        this->broj = other.broj;
        this->godina = other.godina;
    }

    ~MobilePhone() {}

    char const *getModel() {
        return model;
    }

    int getBroj() const {
        return  broj;
    }

    int getGodina() const {
        return godina;
    }

    void print() {
        cout << "Model: " << model << " Broj: " << broj << " Godina: " << godina << endl;
    }
};

class Owner {
private:
    char ime[20];
    char prezime[20];
    MobilePhone mobilePhone;

public:
    Owner(char *ime="", char *prezime="", const MobilePhone &mobilePhone = MobilePhone()) : mobilePhone(mobilePhone) {
        ::strcpy(this->ime, ime);
        ::strcpy(this->prezime, prezime);
    }

    ~Owner() {}

    char const *getIme() {
        return ime;
    }

    char const *getPrezime() {
        return  prezime;
    }

    MobilePhone getMobilePhone() const {
        return mobilePhone;
    }

    void print() {
        cout << " Ime: " << ime << " Prezime: " << prezime << " MobilePhone: ";
        mobilePhone.print();
    }
};

int main() {
    int godina,id,broj;
    char model[20],ime[20], prezime[20];
    cin>>model>>broj>>godina;
    // Create a MobilePhone object
    MobilePhone mobilePhone(model, broj, godina);
    cin>>ime>>prezime;

    // Create an Owner object
    Owner owner(ime, prezime, mobilePhone);

    // Print owner information
    owner.print();

    return 0;
}



2.

Да се дефинира класа Film во која ќе се чуваат информации за:

name(низа од максимум 100 карактери) -име на филмот

rating (децимален број) - рејтинг на филмот

revenue(децимален број) - колку заработил филмот во милиони долари

Сите променливи внатре во класата треба да бидат приватни. Соодветно во рамките на класата да се дефинираат:

конструктор (без и со параметри)

деструктор

set методи

get методи

Да се дефинираат следните методи во класата:

display() која што ќе ги печати информациите за сметката во следниот формат:

Name of film: …

Rating: …

Revenue: …

Надвор од класата:

printMostPopularFilm(Film *films, int n) која што ќе го најде филмот со најголема заработувачка,

ДА НЕ СЕ МЕНУВА MAIN ФУНКЦИЈАТА.

#include <iostream>
#include <cstring>

using namespace std;

class Film {
private:
    char name[50];
    float rating;
    float revenue;

public:
    Film(char *name = "LOL", float rating = 0.0, float revenue = 0.0) {
        ::strcpy(this->name, name);
        this->rating = rating;
        this->revenue = revenue;
    }

    ~Film() {}

    char const *getName() {
        return name;
    }

    float getRating() const {
        return rating;
    }

    float getRevenue() const {
        return revenue;
    }

    void setName(const char *name) {
        ::strncpy(this->name, name, 49);
        this->name[49] = '\0'; // Add null terminator
    }

    void setRating(float rating) {
        this->rating = rating;
    }

    void setRevenue(float revenue) {
        this->revenue = revenue;
    }

    void display() {
        cout << "Name of film: " << name << " Rating: " << rating << " Revenue: " << revenue << endl;
    }
};


    void printMostPopularFilm(Film *films, int n) {
        double maxRevenue = 0.0;
        int maxIndex = 0;
        for (int i = 0; i < n; i++) {
            if (films[i].getRevenue() > maxRevenue) {
                maxRevenue = films[i].getRevenue();
                maxIndex = i;
            }
        }
        cout<<"Film: with the most revenue: "<<endl;
        cout << "Name of film: " << films[maxIndex].getName() << endl;
        cout << "Rating: " << films[maxIndex].getRating() << endl;
        cout << "Revenue: " << films[maxIndex].getRevenue() << endl;
    }




int main() {
    int n;
    cout << "Enter the number of films: ";
    cin >> n;

    // Create an array of Film objects
    Film films[n];

    // Input film data
    for (int i = 0; i < n; i++) {
        char name[50];
        float rating, revenue;
        cout << "Enter name, rating, and revenue for film " << i+1 << ": ";
        cin >> name >> rating >> revenue;
        films[i].setName(name);
        films[i].setRating(rating);
        films[i].setRevenue(revenue);
    }

    // Display film data
    cout << "Film Data:" << endl;
    for (int i = 0; i < n; i++) {
        films[i].display();
    }
    printMostPopularFilm(films,n);

    return 0;
}


3.

Да се дефинира класа Employee во која ќе се чуваат информации за:

name(низа од максимум 100 карактери) -име на вработениот

surname(низа од максимум 100 карактери) - презиме

salary(цел број) - колку му е платата

методи кои што класата треба да ги има:

print() 

-Принта во формат:
Employee name: 

Employee surname: 

Employee salary: 

Да се дефинира класа TechCompany во која ќе се чуваат информации за:

name(низа од максимум 100 карактери) -име на фирмата

employees(низа од вработени) 

numOfEmployees(цел број) - колку вработени има во фирмата 

методи кои што класата треба да ги има:

print() 

-Принта во формат:
Tech company name: 

Number of employees: 

 double getAverageOfEmployeeсSalary()

-Враќа средна врендност од платите на секој вработен во таа фирма


Сите променливи внатре во класите треба да бидат приватни. Соодветно во рамките на класите да се дефинираат:

конструктор (без и со параметри)

деструктор

set методи

get методи

copy constructor

Функции надвор од класата:

printCompanyWithHighestAverageSalary(TechCompany companies[], int numCompanies)

-Го враќа TechCompany објектот што има најголема средна вредност за плати на неговите вработени
printCompanyWithHighestStdSalary(TechCompany companies[], int numCompanies)

-Го враќа TechCompany објектот што има најголема стандардна девијација за плати на неговите вработени
VAR=∑for each Employee e[(e.salary−AVG)2]n−1STD=(√VAR)

-Помош: AVG е средната вредност на платите на сите вработен во таа фирма, STD е стандардна девијација, VAR  е помошна променлива. И прво квадрирајте го изразот па потоа додадете го во сумата!
isSameCompany(TechCompany company1, TechCompany company2)

-Враќа boolean вредност: две фирми се исти ако имаат исто име. Треба само да се првери дали им е исто името!
ДА НЕ СЕ МЕНУВА MAIN ФУНКЦИЈАТА.




#include <iostream>
#include <cstring>
#include <cmath>
using namespace std;
class Employee{
private:
    char name[100];
    char surname[100];
    int salary;

public:
    Employee() {} // default constructor

    Employee(const char* name, const char* surname, int salary) {
        std::strcpy(this->name, name);
        std::strcpy(this->surname, surname);
        this->salary = salary;
    }

    Employee(const Employee& other) {
        std::strcpy(this->name, other.name);
        std::strcpy(this->surname, other.surname);
        this->salary = other.salary;
    }

    const char* getName() const {
        return name;
    }

    void setName(const char* name) {
        std::strcpy(this->name, name);
    }

    const char* getSurname() const {
        return surname;
    }

    void setSurname(const char* surname) {
        std::strcpy(this->surname, surname);
    }

    int getSalary() const {
        return salary;
    }

    void setSalary(int salary) {
        this->salary = salary;
    }

    void printEmployee() {
        cout << "Employee name: " << name << endl;
        cout << "Employee surname: " << surname << endl;
        cout << "Employee salary: " << salary << endl;
    }
};

class TechCompany{
private:
    char name[100];
    Employee employees[20];
    int numEmployees;

public:
    TechCompany() {} // default constructor

    TechCompany(const char* name) {
        std::strcpy(this->name, name);
        numEmployees = 0;
    }

    TechCompany(const TechCompany& other) {
        std::strcpy(this->name, other.name);
        numEmployees = other.numEmployees;
        for (int i = 0; i < numEmployees; i++) {
            employees[i] = other.employees[i];
        }
    }

    const char* getName() const {
        return name;
    }

    void setName(const char* name) {
        std::strcpy(this->name, name);
    }

    int getNumEmployees() const {
        return numEmployees;
    }

    const Employee& getEmployee(int index) const {
        return employees[index];
    }

    void addEmployee(const Employee& employee) {
        if (numEmployees < 20) {
            employees[numEmployees++] = employee;
        }
    }

    double getAverageOfEmployeesSalary() {
        double totalSalary = 0;
        for (int i = 0; i < numEmployees; i++) {
            totalSalary += employees[i].getSalary();
        }
        if (numEmployees > 0) {
            return totalSalary / numEmployees;
        } else {
            return 0;
        }
    }

    void printTechCompany() {
        cout << "Tech company name: " << name << endl;
        cout << "Number of employees: " << numEmployees << endl;
    }
};

TechCompany printCompanyWithHighestAverageSalary(TechCompany companies[], int numCompanies) {
    int highestIndex = -1;
    double highestAverageSalary = -1;

    for (int i = 0; i < numCompanies; i++) {
        double averageSalary = companies[i].getAverageOfEmployeesSalary();

        if (averageSalary > highestAverageSalary) {
            highestAverageSalary = averageSalary;
            highestIndex = i;
        }
    }
    return companies[highestIndex];
}

TechCompany printCompanyWithHighestStdSalary(TechCompany companies[], int numCompanies) {
    int highestIndex = -1;
    double highestStdSalary = -1;

    for (int i = 0; i < numCompanies; i++) {
        int numEmployees = companies[i].getNumEmployees();

        double meanSalary = companies[i].getAverageOfEmployeesSalary();
        double variance = 0.0;

        for (int j = 0; j < numEmployees; j++) {
            double diff = companies[i].getEmployee(j).getSalary() - meanSalary;
            variance += diff * diff;
        }

        double stdSalary = std::sqrt(variance / (numEmployees-1));

        if (stdSalary > highestStdSalary) {
            highestStdSalary = stdSalary;
            highestIndex = i;
        }
    }

    return companies[highestIndex];
}

bool isSameCompany(TechCompany company1, TechCompany company2) {
    return (std::strcmp(company1.getName(), company2.getName()) == 0);
}

//DO NOT CHANGE main()

int main() {
    const int MAX_COMPANIES = 10;
    const int MAX_EMPLOYEES = 20;

    TechCompany companies[MAX_COMPANIES];

    int n;
    std::cin >> n;

    for (int i = 0; i < n; i++) {
        char name[100];
        std::cin >> name;

        TechCompany company(name);

        int m;
        std::cin >> m;

        for (int j = 0; j < m; j++) {
            char name[100];
            char surname[100];
            int salary;

            std::cin >> name;

            std::cin >> surname;

            std::cin >> salary;

            Employee employee(name, surname, salary);

            company.addEmployee(employee);
        }

        companies[i] = company;
    }

    TechCompany copy = companies[0];

    std::cout<<"-->Testing get and set methods for one object and copy constructor"<<std::endl;
    copy.setName("copy");
    std::cout << copy.getName() << std::endl;


    std::cout<<"-->Testing addEmployee function"<<std::endl;
    Employee newEmployee("John", "Doe", 5000);
    copy.addEmployee(newEmployee);
    std::cout << "Number of employees in copy: " << copy.getNumEmployees() << std::endl;


    std::cout<<"-->Testing copy of first employee"<<std::endl;
    Employee firstEmployee = copy.getEmployee(0);
    firstEmployee.printEmployee();


    std::cout<<"-->Testing methods"<<std::endl;
    TechCompany t = printCompanyWithHighestAverageSalary(companies, n);
    TechCompany t1 = printCompanyWithHighestStdSalary(companies, n);

    std::cout << "Tech company with the highest average salary: " << t.getName() << std::endl;
    std::cout << "Tech company with the highest standard deviation for salaries: " <<t1.getName() << std::endl;

    if (isSameCompany(t, t1)){
        std::cout<<"The tech company: "<<t.getName()<<" has the highest standard deviation and highest average salary"<<std::endl;
    }
    return 0;
}






