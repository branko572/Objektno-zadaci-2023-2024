1.

На влез се задаваат две линии со поени на два играчи кои се натпреваруваат во гаѓање во мета. Во првата/втората линија се зададени поените од секое гаѓање на првиот/вториот играч се додека тој не промашил. Со X е означен погодок во центар кој изнесува 50 поени.

Потребно е да напишете класа ResultsManager која ќе содржи две статички методи:

string simplifyFormat(const string& line) - функција која ги претвора сите појавувања на X со 50 поени за дадена линија од резултатите;
int calculateResult(const string& line) - функција која ја пресметува сумата од сите поени за дадена линија од резултатите.
Two lines are inputted with points for two players competing in target shooting. In the first/second line, the points for each shot of the first/second player are provided until they miss. With X we represent a bullseye, worth 50 points.

You need to write a class ResultsManager that contains two static methods:

string simplifyFormat(const string& line) - a function that converts all occurrences of X to 50 points for a given line of results;
int calculateResult(const string& line) - a function that calculates the sum of all points for a given line of results.

For example:

Input	
1 7 4
2 2

Result
Player 1 wins with 8 additional points.

Input
X 3 5
2 2 X 9

Result
Player 2 wins with 5 additional points.


THE CODE:




#include <iostream>
#include <string>
#include <cmath>
using namespace std;

class ResultsManager {
private:
    string line1;
    string line2;
public:
    ResultsManager(const string &line1, const string &line2) {
        this->line1 = line1;
        this->line2 = line2;
    }

    ~ResultsManager() {}

    // Simplify the format by replacing all "X" with "50"
    static string simplifyFormat(const string &line) {
        string result = "";
        for (char c : line) {
            if (c == 'X') {
                result += "50 "; // Replace "X" with "50" and add a space for separation
            } else {
                result += c; // Keep the other characters unchanged
            }
        }
        return result;
    }

    // Calculate the result by summing all the numbers in the string
    static int calculateResult(const string &line) {
        int sum = 0;
        int currentNumber = 0;
        bool numberFound = false;

        for (char c : line) {
            if (isdigit(c)) {
                currentNumber = currentNumber * 10 + (c - '0'); // Build multi-digit numbers
                numberFound = true;
            } else {
                if (numberFound) {
                    sum += currentNumber; // Add the current number to the sum
                    currentNumber = 0;    // Reset for the next number
                    numberFound = false;
                }
            }
        }

        if (numberFound) { // If a number is found at the end of the string
            sum += currentNumber;
        }

        return sum;
    }
};

// Don't modify
int main() {
    string lines[2];
    getline(cin, lines[0]);
    getline(cin, lines[1]);
    
    // Simplify the format by replacing "X" with "50"
    string simplifiedLine1 = ResultsManager::simplifyFormat(lines[0]);
    string simplifiedLine2 = ResultsManager::simplifyFormat(lines[1]);

    // Calculate the result after simplification
    int score1 = ResultsManager::calculateResult(simplifiedLine1);
    int score2 = ResultsManager::calculateResult(simplifiedLine2);

    cout << "Player " << ((score1 > score2) ? "1 " : "2 ") << "wins with " << abs(score1 - score2) << " additional points.";
    return 0;
}



2.


NBAPlayer
Да се дефинира класа NBAPlayer за која ќе се чуваат:

динамички алоцирана низа од карактери за името на играчот
низа од максимум 40 карактери за тимот во кој играчот моментално настапува
просечен број на поени на играчот оваа сезона (double)
просечен број на асистенции на играчот оваа сезона (double)
просечен број на скокови на играчот оваа сезона (double)
За потребите на класата да се дефинираат:

default конструктор и конструктор со аргументи
copy constructor и оператор =
деструктор
метод rating() кој го враќа рејтингот на кошаркарот кој се пресметува како:

45% од поените + 30% од асистенциите + 25% од скоковите

метод print() кој го печати играчот во следниот формат:

Име - тим

Points: поени

Assists: асистенции

Rebounds: скокови

Rating: рејтинг

AllStarPlayer
Од претходната класа NBAPlayer да се изведе класата AllStarPlayer за која дополнително ќе се чуваат и:

просечен број на поени на играчот од All Star натпреварите (double)
просечен број на асистенции на играчот од All Star натпреварите (double)
просечен број на скокови на играчот од All Star натпреварите (double)
За потребите на класата да се дефинираат:

default конструктор
конструктор кој прима објект од NBAPlayer и плус додатните информации (погледни main)
конструктор кој ги прима сите аргументи (погледни main)
copy constructor, оператор =, деструктор
метод allStarRating() кој го враќа рејтингот на кошаркарот од All Star натпреварите и кој се пресметува како:

30% од поените + 40% од асистенциите + 30% од скоковите

Да се препокријат методите:

rating() кој го враќа просекот од обичниот рејтинг на кошаркарот и неговиот All Star рејтинг
print() кој покрај основните информации за кошаркарот печати и:

All Star Rating: рејтингот од All Star натпреварите

New Rating: просечниот рејтинг

For example:

Input	
1
Nikola_Jokic Denver_Nuggets 18.3 6.1 10.6
Lonzo_Ball Los_Angeles_Lakers 10.2 7.2 6.9
Donovan_Mitchell Utah_Jazz 20.4 3.6 3.7
Ben_Simmons Philadelphia_76ers 16 8.2 8.2
Kristaps_Porzingis New_York_Knicks 22.7 1.2 6.6

Result
NBA PLAYERS:
=====================================
Nikola_Jokic - Denver_Nuggets
Points: 18.3
Assists: 6.1
Rebounds: 10.6
Rating: 12.715
Lonzo_Ball - Los_Angeles_Lakers
Points: 10.2
Assists: 7.2
Rebounds: 6.9
Rating: 8.475
Donovan_Mitchell - Utah_Jazz
Points: 20.4
Assists: 3.6
Rebounds: 3.7
Rating: 11.185
Ben_Simmons - Philadelphia_76ers
Points: 16
Assists: 8.2
Rebounds: 8.2
Rating: 11.71
Kristaps_Porzingis - New_York_Knicks
Points: 22.7
Assists: 1.2
Rebounds: 6.6
Rating: 12.225



#include <iostream>
#include <string>
#include <cmath>
#include <cstring>
#include <string.h>
#include <iomanip>
using namespace std;

class NBAPlayer {
private:
    char *name;
    char team[40];
    double points;
    double assists;
    double jumps;

public:
    NBAPlayer(char *name = "", char *team = "", double points = 0, double assists = 0, double jumps = 0) {
        this->name = new char(::strlen(name) + 1);
        ::strcpy(this->name, name);
        ::strcpy(this->team, team);
        this->points = points;
        this->assists = assists;
        this->jumps = jumps;
    }

    NBAPlayer(const NBAPlayer &other) {
        this->name = new char(::strlen(other.name) + 1);
        ::strcpy(this->name, other.name);
        ::strcpy(this->team, other.team);
        this->points = other.points;
        this->assists = other.assists;
        this->jumps = other.jumps;
    }

    ~NBAPlayer() {
        delete[] name;
    }

    NBAPlayer& operator=(const NBAPlayer& u) {
        if (this != &u) {
            delete[] name;
            this->name = new char[strlen(u.name) + 1];
            strcpy(this->name, u.name);
            ::strcpy(this->team, u.team);
            this->points = u.points;
            this->assists = u.assists;
            this->jumps = u.jumps;
        }
        return *this;
    }

    double rating() {
        return (0.45 * points) + (0.30 * assists) + (0.25 * jumps);
    }

    void print() {
        cout << name << " - " << team << endl;
        cout << "Points: " << points << endl;
        cout << "Assists: " << assists << endl;
        cout << "Rebounds: " << jumps << endl;
        cout << "Rating: " << rating() << endl;
    }
};
class AllStarPlayer : public NBAPlayer {
private:
    double allStarPoints;
    double allStarAssists;
    double allStarRebounds;

public:
    // Default constructor
    AllStarPlayer() : NBAPlayer(), allStarPoints(0), allStarAssists(0), allStarRebounds(0) {}

    // Parameterized constructor
    AllStarPlayer(char *name, char *team, double points, double assists, double jumps, double allStarPoints=0,
                  double allStarAssists=0, double allStarRebounds=0) : NBAPlayer(name, team, points, assists, jumps),
                                                                       allStarPoints(allStarPoints),
                                                                       allStarAssists(allStarAssists),
                                                                       allStarRebounds(allStarRebounds) {
        this->allStarPoints = allStarPoints;
        this->allStarAssists = allStarAssists;
        this->allStarRebounds = allStarRebounds;
    }

    // Copy constructor
    AllStarPlayer(const AllStarPlayer &other) : NBAPlayer(other) {
        this->allStarPoints = other.allStarPoints;
        this->allStarAssists = other.allStarAssists;
        this->allStarRebounds = other.allStarRebounds;
    }

    // Assignment operator
    AllStarPlayer& operator=(const AllStarPlayer &a) {
        if (this != &a) {
            NBAPlayer::operator=(a);  // Calls the assignment operator of the base class
            this->allStarPoints = a.allStarPoints;
            this->allStarAssists = a.allStarAssists;
            this->allStarRebounds = a.allStarRebounds;
        }
        return *this;
    }

    // Rating function
    double allStarRating() {
        return (0.30 * allStarPoints) + (0.40 * allStarAssists) + (0.30 * allStarRebounds);
    }

    // Print function
    void print() {
        NBAPlayer::print();  // Prints the base player details
        cout << "All Star Rating: " << allStarRating() << endl;
        cout << "New Rating: " << rating() << endl;
    }

    // Rating that combines the base and All Star ratings
    double rating() {
        return (NBAPlayer::rating() + allStarRating()) / 2.0;
    }
};


int main() {
    char name[50];
    char team[40];
    double points;
    double assists;
    double rebounds;
    double allStarPoints;
    double allStarAssists;
    double allStarRebounds;

    NBAPlayer* players = new NBAPlayer[5];
    AllStarPlayer* asPlayers = new AllStarPlayer[5];
    int n;
    cin >> n;

    if (n == 1) {
        cout << "NBA PLAYERS:" << endl;
        cout << "=====================================" << endl;
        for (int i = 0; i < 5; ++i) {
            cin >> name >> team >> points >> assists >> rebounds;
            players[i] = NBAPlayer(name, team, points, assists, rebounds);
            players[i].print();
        }
    } else if (n == 2) {
        for (int i = 0; i < 5; ++i) {
            cin >> name >> team >> points >> assists >> rebounds;
            cin >> allStarPoints >> allStarAssists >> allStarRebounds;
            players[i] = NBAPlayer(name, team, points, assists, rebounds);
            asPlayers[i] = AllStarPlayer(name, team, points, assists, rebounds, allStarPoints, allStarAssists, allStarRebounds);
        }

        cout << "NBA PLAYERS:" << endl;
        cout << "=====================================" << endl;
        for (int i = 0; i < 5; ++i)
            players[i].print();

        cout << "ALL STAR PLAYERS:" << endl;
        cout << "=====================================" << endl;
        for (int i = 0; i < 5; ++i)
            asPlayers[i].print();

    } else if (n == 3) {
        for (int i = 0; i < 5; ++i) {
            cin >> name >> team >> points >> assists >> rebounds;
            cin >> allStarPoints >> allStarAssists >> allStarRebounds;
            asPlayers[i] = AllStarPlayer(name, team, points, assists, rebounds, allStarPoints, allStarAssists, allStarRebounds);
        }
        cout << "ALL STAR PLAYERS:" << endl;
        cout << "=====================================" << endl;
        for (int i = 0; i < 5; ++i)
            asPlayers[i].print();
    }

    delete[] players;
    delete[] asPlayers;
}

